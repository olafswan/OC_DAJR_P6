//  ---------------------------------
//* fonction r√©cup√©ration des donn√©es et cr√©ation d'un object  listant les object de chaque photographer
//  ---------------------------------

let photographers;

async function getPhotographers() {
  // contact le "serveur" pour r√©cup√©rer le json
  const r = await fetch("../../data/photographers.json");
  // si r√©ponse du serveur
  if (r.ok === true) {
    // retourn le json
    photographers = await r.json();
  } else {
    // si pas de r√©ponse retourne une erreur
    throw new Error("Impossible de r√©cup√©rer les donn√©es");
  }

  // r√©cup√©re uniquement les donn√©es pour la key photographers
  console.log("üöÄ donn√©es brutes du fichier json", photographers);
  console.log(typeof photographers);
  photographers = photographers.photographers;
  console.log("üöÄ donn√©es cibl√©es du fichier json", photographers);
  console.log(typeof photographers);

  return photographers;
}

//  ----------------------------------------
//* fonction affichage des donn√©es r√©cup√©r√©es
//  -----------------------------------------

async function displayData(photographers) {
  // cible l'element HTML de classe photographer_section
  const photographersSection = document.querySelector(".photographer_section");

  // it√©ration sur chaque √©l√©ment du tableau photographer
  photographers.forEach((photographer) => {
    // utilisation de la fonction photographerFactory (comment est elle li√©e ?)
    const photographerModel = photographerFactory(photographer);
    const userCardDOM = photographerModel.getUserCardDOM();
    photographersSection.appendChild(userCardDOM);
  });
}

//  ----------------------------------------
//* fonction intialisation (fetch + display)
//  -----------------------------------------

async function init() {
  // R√©cup√®re les datas des photographes
  const { photographers } = await getPhotographers();
  displayData(photographers);
}

init();
